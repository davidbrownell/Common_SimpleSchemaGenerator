# ----------------------------------------------------------------------
# |  
# |  Item.py
# |  
# |  David Brownell <db@DavidBrownell.com>
# |      2018-07-09 14:40:07
# |  
# ----------------------------------------------------------------------
# |  
# |  Copyright David Brownell 2018.
# |  Distributed under the Boost Software License, Version 1.0.
# |  (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
# |  
# ----------------------------------------------------------------------
"""Contains the Item object"""

import os
import sys

from collections import OrderedDict, namedtuple

from enum import Enum

import CommonEnvironment

# ----------------------------------------------------------------------
_script_fullpath = os.path.abspath(__file__) if "python" in sys.executable.lower() else sys.executable
_script_dir, _script_name = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
class Item(object):
    """Temporary object that is generated by Populate and consumed by Transform"""

    # ----------------------------------------------------------------------
    # |  Public Types
    class DeclarationType(Enum):
        Object = 1
        Declaration = 2

    class ItemType(Enum):
        Standard = 1
        Attribute = 2
        Definition = 3

    class MetadataSource(Enum):
        Explicit = 1
        Default = 2
        Config = 3

    Metadata                                = namedtuple( "Metadata",
                                                          [ "Values",
                                                            "Filename",
                                                            "Line",
                                                            "Column",
                                                          ],
                                                        )

    MetadataValue                           = namedtuple( "MetadataValue",
                                                          [ "Value",
                                                            "Source",
                                                            "Filename",
                                                            "Line",
                                                            "Column",
                                                          ],
                                                        )

    # ----------------------------------------------------------------------
    def __init__( self,
                  declaration_type,
                  item_type,
                  parent,
                  source,
                  line,
                  column,
                  is_external,              # True if the item is defined in another file
                ):
        # Populated during Parse
        self.DeclarationType                = declaration_type
        self.ItemType                       = item_type
        self.Parent                         = parent
        self.Source                         = source
        self.Line                           = line
        self.Column                         = column
        self.IsExternal                     = is_external

        self.name                           = None
        self.reference                      = None
        self.metadata                       = OrderedDict()
        self.arity                          = None
        self.items                          = []

        self.positional_arguments           = []
        self.keyword_arguments              = OrderedDict()
        
        # BugBug: Validate items below

        # Populated during Validation
        self.referenced_by                  = []

        # Populated during Commit
        self._is_committed                  = False
        self.element_type                   = None
        self.key                            = None
        self.is_new_type                    = None

    # BugBug # ----------------------------------------------------------------------
    # BugBug def __repr__(self):
    # BugBug     return CommonEnvironment.ObjectReprImpl(self)

    # BugBug: More here
